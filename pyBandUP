#! /usr/bin/env python
# Copyright (C) 2017 Paulo V. C. Medeiros
# A python wrapper to BandUP and its plotting tool
# This file is part of BandUP: Band Unfolding code for Plane-wave based calculations.
#
# BandUP is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
#  BandUP is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with BandUP.  If not, see <http://www.gnu.org/licenses/>.
from bandup_python_wrapper.environ import *
from  bandup_python_wrapper.files import *
from bandup_python_wrapper.argparse_wrapper import *
import argparse
import os
import sys
from scipy.constants import physical_constants
import shutil
from collections import OrderedDict
from subprocess import Popen, PIPE, STDOUT



common_plot_folder = os.path.join(working_dir, "plot")
inputs_for_plot_folder = os.path.join(working_dir, "input_files_plot")
dE=0.050
sc_calc_folder=os.path.join(os.path.dirname(working_dir), 
                            "step_1_get_converged_charge_density")
pcbz_kpts_folder = os.path.join(os.path.dirname(working_dir), 
                                "step_2_get_kpts_to_be_used_in_the_SC_band_struc_calcs",
                                "input_files")
orbitals_calc_dir = os.path.join(os.path.dirname(working_dir), 
                                 "step_3_get_SC_wavefunctions_to_be_used_for_unfolding")

# The Fermi energy is taken only from the self consistent calculation. 
# Please ensure convergence w.r.t. k-point mesh for your self-consistent calculations!
if(bandup_args.castep):
    efermi_file = [os.path.join(sc_calc_folder,fname) for fname in 
                   os.listdir(sc_calc_folder) if fname.endswith('.bands')][0]
    with open(efermi_file, 'r') as f:
        flines = f.readlines()
        for line in flines:
            if("Fermi energy" in line):
                efermi_au = float(line.split()[-1])
                continue
    efermi = efermi_au / physical_constants["electron volt-hartree relationship"][0]
    # Working out the seed
    if(not bandup_args.seed):
        bandup_args.seed = os.path.splitext(os.path.basename(efermi_file))[0]
        print 'WARNING: Seed not passed as argument. Using "%s".'%(
               bandup_args.seed)
        sysargv_for_bandup.append('-seed')
        sysargv_for_bandup.append(bandup_args.seed)

prim_cell_lattice_file_folder = pcbz_kpts_folder
prim_cell_lattice_file = os.path.join(prim_cell_lattice_file_folder, 
                                      "prim_cell_lattice.in")
supercell_lattice_file = os.path.join(pcbz_kpts_folder, "supercell_lattice.in")

for direc in ["K-G_G-M_M-K"]:
    print "Getting EBS along direction %s"%(direc)
    current_orbitals_folder = os.path.join(orbitals_calc_dir, 
                                           "to_unfold_onto_pcbz_direc_%s"%(direc))
    current_band_unfolding_folder = os.path.join(working_dir, 
                                                 "band_unfolding_onto_direc_%s"%(direc))
    KPOINTS_prim_cell_file = os.path.join(pcbz_kpts_folder, 
                                          "KPOINTS_prim_cell_%s.in"%(direc))
    energy_info_file = os.path.join(current_band_unfolding_folder, "energy_info.in")
    
    #rmdir(current_band_unfolding_folder) # TEMP
    #mkdir(current_band_unfolding_folder) # TEMP
    os.chdir(current_band_unfolding_folder)

    input_fnames = ["KPOINTS_prim_cell.in", "prim_cell_lattice.in", 
                    "supercell_lattice.in"]
    input_fpaths = [KPOINTS_prim_cell_file, prim_cell_lattice_file, 
                    supercell_lattice_file]
    for i,fpath in enumerate(input_fpaths):
        new_fpath = os.path.join(current_band_unfolding_folder, input_fnames[i])
        rmfile(new_fpath)
        shutil.copy(fpath, new_fpath)

    if(direc == 'K-G_G-M_M-K'):
        emin={'unfold':-20.0, 'plot': -20.0}
        emax={'unfold':5.0, 'plot':5.0}
    else:
        emin={'unfold':-1.2, 'plot': -1.2}
        emax={'unfold':1.2, 'plot':1.2}
    energy_info_file_contents = OrderedDict([("E_Fermi",efermi), 
                                             ("emin",emin['unfold']),
                                             ("emax",emax['unfold']), 
                                             ("dE",dE)])
    energy_info_file_contents_plot = OrderedDict([("E_Fermi",efermi), 
                                                  ("emin",emin['plot']),
                                                  ("emax",emax['plot']), 
                                                  ("dE",dE)])
    with open(energy_info_file, 'w') as f:
        for k,v in energy_info_file_contents.iteritems(): 
            f.write("%.5f  ! %s \n"%(v,k))

    # Preparing Wavefunction file
    orbitals_file = [os.path.join(orbitals_calc_dir,fname) for fname in 
                     os.listdir(orbitals_calc_dir)
                     if fname.endswith('.orbitals')][0]
    orbitals_filename = os.path.basename(orbitals_file)
    castep_seed = os.path.splitext(orbitals_filename)[0]
    orbitals_file_symlink = os.path.join(current_band_unfolding_folder, 
                                         orbitals_filename)
    rmfile(orbitals_file_symlink)
    os.symlink(orbitals_file, orbitals_file_symlink)

    
    if(bandup_args.unfold):
        # Running BandUP 
        bandup_run_options = [BandUp_exe] + sysargv_for_bandup
        with open("out_BandUP_dir_%s.dat"%(direc), 'w') as f:
            bandup_run = Popen(bandup_run_options, stdout=PIPE, stderr=STDOUT)
            for line in iter(bandup_run.stdout.readline, ''):
                sys.stdout.write(line)
                f.write(line)

    if(bandup_args.plot):
        # Producing the plot
        plot_folder = os.path.join(common_plot_folder, "direction_%s"%(direc))
        mkdir(plot_folder)    
        for k,v in bandup_raw.iteritems():
            bandup_raw[k] = os.path.join(current_band_unfolding_folder, v)
        for fpath in bandup_raw.values():
            new_fpath = os.path.join(plot_folder, os.path.basename(fpath))
            rmfile(new_fpath)
            shutil.copy(fpath, new_fpath)
        
        energy_info_file_plot = os.path.join(plot_folder, "energy_info.in")
        for fpath in [KPOINTS_prim_cell_file, prim_cell_lattice_file]:
            new_fpath = os.path.join(plot_folder, os.path.basename(fpath))
            rmfile(new_fpath)
            shutil.copy(fpath, new_fpath)
        with open(energy_info_file_plot, 'w') as f:
            for k,v in energy_info_file_contents_plot.iteritems(): 
                f.write("%.5f  ! %s \n"%(v,k))
        # Calling BandUP's plotting tool to produce the figure
        bandup_plot(sysargv_for_plotting_tool, ignore_unknown_args=True)
