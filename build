#! /usr/bin/env python
from __future__ import print_function
import argparse
import sys
import os
import time
import shutil
from subprocess import Popen, PIPE, STDOUT

supported_fortran_compilers = ['ifort', 'gfortran']
parser = argparse.ArgumentParser()
parser.add_argument(
    '-compiler', nargs='?', default=None, choices=supported_fortran_compilers,
    help=('If the fortran compiler is not explicitly chosen, the script will attempt '+
          'to use one of the allowed choices, in the same order they appear here.'),
)
parser.add_argument(
    '--doc', action='store_true', 
    help='Attempts to use doxygen to generate source code documentation.'
)
parser.add_argument('--clean', action='store_true', 
                    help='Removes all files created when building BandUP.')
args = parser.parse_args()

def error_exit(msg):
    print('ERROR: %s'%(msg))
    print('Cannot continue. Stopping now.')
    sys.exit(1)
def system_has_compiler(compiler):
    try:
        compiler_call = Popen([compiler], stdout=PIPE, stderr=STDOUT)
        return True
    except(OSError):
        return False
def get_gcc():
    comp = 'gcc'
    for v in range(2,7)[::-1]:
        new_comp = 'gcc-%d'%(v)
        if(system_has_compiler(new_comp)):
            comp = new_comp
            break
    return comp
def compatible_c(fortcomp):
    if('ifort' in fortcomp): return 'icc'
    elif('gfortran' in fortcomp): return get_gcc()
    else: return None
def compatible_omp(fortcomp):
    if('ifort' in fortcomp): return '-openmp'
    elif('gfortran' in fortcomp): return '-fopenmp'
    else: return None
def silent_mkdir(path):
    try:
        os.makedirs(path)
    except(OSError):
        if(not os.path.isdir(path)): raise
def rmdir(path):
    try:
        shutil.rmtree(path)
    except(OSError):
        if(os.path.isdir(path)):
            print('WARNING: Could not remove dir %s'%(path))
def run_doxygen(bandup_dir, remove=False, verbose=False):
    os.environ['BANDUPDIR'] = bandup_dir
    main_doc_dir = os.path.join(bandup_dir, 'doc')
    outdir = os.path.join(main_doc_dir, 'source_code')
    os.environ['DOXIGENOUTDIR'] = outdir
    config_file = os.path.join(bandup_dir, 'src', 'Doxyfile')
    if(verbose): 
        if(remove):
            print('Removing dir %s'%(main_doc_dir))
        else:
            print('Creating source code documentation')
    if(remove):
        rmdir(main_doc_dir)
    else:
        try:
            silent_mkdir(outdir)
            doxygen_call = Popen(['doxygen', config_file], stdout=PIPE, stderr=STDOUT)
            out, err = doxygen_call.communicate()
        except(OSError):
            print('WARNING: Could not create source code documentation!')

user_chose_compiler = args.compiler is not None
if(user_chose_compiler):
    if(not system_has_compiler(args.compiler)):
        error_exit('The compiler you chose (%s) is not available in your system.'%(
                   args.compiler))
else:
    for comp in supported_fortran_compilers:
        if(system_has_compiler(comp)):
            args.compiler = comp
            break
    if(args.compiler is None):
        error_exit('Could not find a supported Fortran compiler.')

# If the code reaches this point, then the picked fortran compiler is valid
if(user_chose_compiler):
    print('BandUP will be compiled using %s (compiler chosen by you)'%(args.compiler))
else: 
    print('BandUP will be compiled using %s (compiler determined automatically)'%(
          args.compiler))

# Building (or cleaning, if "--clean" was passed)
working_dir = os.getcwd()
omp_flag = compatible_omp(args.compiler)
c_comp = compatible_c(args.compiler)
clean = ''
if(args.clean):
    clean = 'veryclean'
    run_doxygen(bandup_dir=working_dir, remove=True, verbose=True)
elif(args.doc): 
    run_doxygen(bandup_dir=working_dir, verbose=True) 
os.chdir(os.path.join(working_dir, 'src', 'external'))
os.system('make FC=%s CC=%s OMP_FLAG=%s %s'%(args.compiler, c_comp, omp_flag, clean))
os.chdir(os.path.join(working_dir, 'src'))
os.system('make FC=%s CC=%s %s'%(args.compiler, c_comp, clean))
os.chdir(working_dir)

# Creating config dir and file
bandup_dir = working_dir
bandup_config_dir = os.path.join(os.path.expanduser('~'), '.bandup')
bandup_config_file = os.path.join(bandup_config_dir, 'config')
silent_mkdir(bandup_config_dir)
now = time.strftime('%-H:%M UTC%z on %b %d, %Y')
with open(bandup_config_file, 'w') as f:
    f.write('# Created by BandUP on %s\n'%(now))
    f.write('BANDUPDIR=%s'%(bandup_dir))
